<?php declare(strict_types=1);

namespace Test\Model;

use App\Model\AccountMapper;
use App\Model\SqlConnector;
use PHPUnit\Framework\TestCase;
use App\Model\AccountEntityManager;
use App\Model\AccountDTO;

class AccountEntityManagerTest extends TestCase
{
    private SqlConnector $sqlConnector;
    private AccountMapper $accountMapper;

    protected function setUp(): void
    {
        $this->sqlConnector = $this->createMock(SqlConnector::class);
        $this->accountMapper = $this->createMock(AccountMapper::class);
    }

    public function testSaveDeposit(): void
    {
        $entityManager = new AccountEntityManager($this->sqlConnector, $this->accountMapper);
        $deposit = new AccountDTO();

        $this->accountMapper->expects($this->once())
            ->method('dtoToArray')
            ->with($deposit)
            ->willReturn([
                'value' => 100.0,
                'userID' => 1,
                'transactionDate' => '2023-10-07',
                'transactionTime' => '12:34:56',
                'purpose' => 'Deposit',
            ]);

        $this->sqlConnector->expects($this->once())
            ->method('executeInsertQuery')
            ->with(
                $this->equalTo('INSERT INTO Transactions (value, userID, transactionDate, transactionTime, purpose) VALUES (:value, :userID, :transactionDate, :transactionTime, :purpose)'),
                $this->callback(function ($params) {
                    return $params[':value'] === 100.0
                        && $params[':userID'] === 1
                        && $params[':transactionDate'] === '2023-10-07'
                        && $params[':transactionTime'] === '12:34:56'
                        && $params[':purpose'] === 'Deposit';
                })
            );

        $entityManager->saveDeposit($deposit);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
